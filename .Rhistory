library(geneSetPathwayAnalysis)
library(GO.db)
#goTermsPath <- file.path(.lmp, "geneSetPathwayAnalysis", "inst", "extdata", "archive", "data", "all_go_slim_generic.txt")
goTermsPath <- file.path("inst/scripts/apoptosis_go_terms.txt")
selectedGoTerms <- read.table(goTermsPath, header=TRUE, sep="\t", stringsAsFactors=FALSE)
selectedGoTerms <- selectedGoTerms[1:2,]
#selectedGoTerms <- selectedGoTerms[which(selectedGoTerms$ontology == "BP"), ]
#goIdx <- which(!(selectedGoTerms$go_child_term_name %in% c("molecular_function", "protein binding")))
#selectedGoTerms <- selectedGoTerms[goIdx,]
symbols <- geneSets[["All Gene Sets"]]
#symbols <- "BAX"
#goResultsNames <- getGoCnts(symbols, selectedGoTerms, returnType="list", useNames=TRUE)
#goResultsTerms <- getGoCnts(symbols, selectedGoTerms, returnType="list", useNames=FALSE)
dat <- select(org.Hs.eg.db, keys=symbols, columns=c("SYMBOL", "GO"), keytype="SYMBOL")
t2 <- dat[dat$GO %in% selectedGoTerms$go_child_term,]
goids <- dat$GO
dat2 <- select(GO.db, keys=goids, columns=c("GOID", "TERM"), keytype="GOID")
t3 <- unique(dat2)
t4 <- merge(t2, t3, by.x="GO", by.y="GOID")
t5 <- t4[, c("GO", "SYMBOL", "ONTOLOGY", "TERM")]
t6 <- unique(t5)
a <- t6[which(t6$TERM == "negative regulation of apoptotic process"), "SYMBOL"]
b <- t6[which(t6$TERM == "positive regulation of apoptotic process"), "SYMBOL"]
#a <- t6[which(t6$TERM == "negative regulation of cell proliferation"), "SYMBOL"]
c <- t6[which(t6$TERM == "positive regulation of cell division"), "SYMBOL"]
length(a)
length(b)
length(c)
#saveRDS(goResultsNames, file=goResultsNamesFilename)
#saveRDS(goResultsTerms, file=goResultsTermsFilename)
View(t2)
selectedGoTerms$go_child_term
library(rcellminerUtils)
library(geneSetPathwayAnalysis)
library(GO.db)
#goTermsPath <- file.path(.lmp, "geneSetPathwayAnalysis", "inst", "extdata", "archive", "data", "all_go_slim_generic.txt")
goTermsPath <- file.path("inst/scripts/apoptosis_go_terms.txt")
selectedGoTerms <- read.table(goTermsPath, header=TRUE, sep="\t", stringsAsFactors=FALSE)
#selectedGoTerms <- selectedGoTerms[1:2,]
#selectedGoTerms <- selectedGoTerms[which(selectedGoTerms$ontology == "BP"), ]
#goIdx <- which(!(selectedGoTerms$go_child_term_name %in% c("molecular_function", "protein binding")))
#selectedGoTerms <- selectedGoTerms[goIdx,]
symbols <- geneSets[["All Gene Sets"]]
#symbols <- "BAX"
#goResultsNames <- getGoCnts(symbols, selectedGoTerms, returnType="list", useNames=TRUE)
#goResultsTerms <- getGoCnts(symbols, selectedGoTerms, returnType="list", useNames=FALSE)
dat <- select(org.Hs.eg.db, keys=symbols, columns=c("SYMBOL", "GO"), keytype="SYMBOL")
t2 <- dat[dat$GO %in% selectedGoTerms$go_child_term,]
goids <- dat$GO
dat2 <- select(GO.db, keys=goids, columns=c("GOID", "TERM"), keytype="GOID")
t3 <- unique(dat2)
t4 <- merge(t2, t3, by.x="GO", by.y="GOID")
t5 <- t4[, c("GO", "SYMBOL", "ONTOLOGY", "TERM")]
t6 <- unique(t5)
a <- t6[which(t6$TERM == "negative regulation of apoptotic process"), "SYMBOL"]
b <- t6[which(t6$TERM == "positive regulation of apoptotic process"), "SYMBOL"]
#a <- t6[which(t6$TERM == "negative regulation of cell proliferation"), "SYMBOL"]
c <- t6[which(t6$TERM == "positive regulation of cell division"), "SYMBOL"]
length(a)
length(b)
length(c)
#saveRDS(goResultsNames, file=goResultsNamesFilename)
#saveRDS(goResultsTerms, file=goResultsTermsFilename)
c
library(rcellminerUtils)
library(geneSetPathwayAnalysis)
library(GO.db)
#goTermsPath <- file.path(.lmp, "geneSetPathwayAnalysis", "inst", "extdata", "archive", "data", "all_go_slim_generic.txt")
goTermsPath <- file.path("inst/scripts/apoptosis_go_terms.txt")
selectedGoTerms <- read.table(goTermsPath, header=TRUE, sep="\t", stringsAsFactors=FALSE)
#selectedGoTerms <- selectedGoTerms[1:2,]
#selectedGoTerms <- selectedGoTerms[which(selectedGoTerms$ontology == "BP"), ]
#goIdx <- which(!(selectedGoTerms$go_child_term_name %in% c("molecular_function", "protein binding")))
#selectedGoTerms <- selectedGoTerms[goIdx,]
symbols <- geneSets[["All Gene Sets"]]
#symbols <- "BAX"
#goResultsNames <- getGoCnts(symbols, selectedGoTerms, returnType="list", useNames=TRUE)
#goResultsTerms <- getGoCnts(symbols, selectedGoTerms, returnType="list", useNames=FALSE)
dat <- select(org.Hs.eg.db, keys=symbols, columns=c("SYMBOL", "GO"), keytype="SYMBOL")
t2 <- dat[dat$GO %in% selectedGoTerms$go_child_term,]
goids <- dat$GO
dat2 <- select(GO.db, keys=goids, columns=c("GOID", "TERM"), keytype="GOID")
t3 <- unique(dat2)
t4 <- merge(t2, t3, by.x="GO", by.y="GOID")
t5 <- t4[, c("GO", "SYMBOL", "ONTOLOGY", "TERM")]
t6 <- unique(t5)
a <- t6[which(t6$TERM == "negative regulation of apoptotic process"), "SYMBOL"]
b <- t6[which(t6$TERM == "positive regulation of apoptotic process"), "SYMBOL"]
c <- t6[which(t6$TERM == "positive regulation of cell division"), "SYMBOL"]
d <- t6[which(t6$TERM == "negative regulation of cell division"), "SYMBOL"]
length(a)
length(b)
length(c)
length(d)
#saveRDS(goResultsNames, file=goResultsNamesFilename)
#saveRDS(goResultsTerms, file=goResultsTermsFilename)
d
sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
ort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
#--------------------------------------------------------------------------------------------------
# PREPARE AND SAVE GENE SETS LIST
#--------------------------------------------------------------------------------------------------
library(rcmUtils)
maDnaRep <- sort(unique(read.table(file="inst/extdata/aladjem_dnarep.txt",
header=TRUE, sep="\t", stringsAsFactors=FALSE,
comment.char="", quote="")$GENE_NAME))
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
geneSets[["ABC Transporters"]] <- rcmUtils::cancerGeneSets[["abc_transporters"]]
geneSets[["Apoptosis"]] <- rcmUtils::cancerGeneSets[["apoptosis"]]
geneSets[["Cell Signaling"]] <- rcmUtils::cancerGeneSets[["cell_signaling"]]
geneSets[["DDR"]] <- rcmUtils::cancerGeneSets[["ddr"]]
geneSets[["DDR (BER)"]]   <- rcmUtils::ddrGeneSets[["BER"]]
geneSets[["DDR (NER)"]]   <- rcmUtils::ddrGeneSets[["NER"]]
geneSets[["DDR (MMR)"]]   <- rcmUtils::ddrGeneSets[["MMR"]]
geneSets[["DDR (FA)"]]    <- rcmUtils::ddrGeneSets[["FA (Fanconi anemia pathway)"]]
geneSets[["DDR (HR)"]]    <- rcmUtils::ddrGeneSets[["HR (Homologous Recombination)"]]
geneSets[["DDR (NHEJ)"]]  <- rcmUtils::ddrGeneSets[["NHEJ"]]
geneSets[["DDR (Direct Repair)"]]   <- rcmUtils::ddrGeneSets[["Direct Repair"]]
geneSets[["DDR (G1-S checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G1-S checkpoint"]]
geneSets[["DDR (DNA replication)"]]   <- sort(unique(c(rcmUtils::ddrGeneSets[["DNA replication"]],
maDnaRep)))
geneSets[["DDR (TLS)"]]   <- rcmUtils::ddrGeneSets[["TLS"]]
geneSets[["DDR (G2-M checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G2-M checkpoint"]]
geneSets[["DDR (Chromatin)"]]   <- rcmUtils::ddrGeneSets[["Chromatin remodelling"]]
geneSets[["EMT (Epithelial)"]] <- sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
geneSets[["EMT (Mesenchymal)"]] <- sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
geneSets[["Oncogenes"]] <- rcmUtils::cancerGeneSets[["oncogenes"]]
geneSets[["Protein Kinases"]] <- rcmUtils::cancerGeneSets[["protein_kinases"]]
geneSets[["Solute Carriers"]] <- rcmUtils::cancerGeneSets[["solute_carriers"]]
geneSets[["Transcription Factors"]] <- rcmUtils::cancerGeneSets[["transcription_factors"]]
geneSets[["Tumor Suppressors"]] <- rcmUtils::cancerGeneSets[["tumor_suppressors"]]
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
#--------------------------------------------------------------------------------------------------
# PREPARE AND SAVE GENE SETS LIST
#--------------------------------------------------------------------------------------------------
library(rcmUtils)
maDnaRep <- sort(unique(read.table(file="inst/extdata/aladjem_dnarep.txt",
header=TRUE, sep="\t", stringsAsFactors=FALSE,
comment.char="", quote="")$GENE_NAME))
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
geneSets[["ABC Transporters"]] <- rcmUtils::cancerGeneSets[["abc_transporters"]]
geneSets[["Apoptosis"]] <- rcmUtils::cancerGeneSets[["apoptosis"]]
geneSets[["Cell Signaling"]] <- rcmUtils::cancerGeneSets[["cell_signaling"]]
geneSets[["DDR"]] <- rcmUtils::cancerGeneSets[["ddr"]]
geneSets[["DDR (BER)"]]   <- rcmUtils::ddrGeneSets[["BER"]]
geneSets[["DDR (NER)"]]   <- rcmUtils::ddrGeneSets[["NER"]]
geneSets[["DDR (MMR)"]]   <- rcmUtils::ddrGeneSets[["MMR"]]
geneSets[["DDR (FA)"]]    <- rcmUtils::ddrGeneSets[["FA (Fanconi anemia pathway)"]]
geneSets[["DDR (HR)"]]    <- rcmUtils::ddrGeneSets[["HR (Homologous Recombination)"]]
geneSets[["DDR (NHEJ)"]]  <- rcmUtils::ddrGeneSets[["NHEJ"]]
geneSets[["DDR (Direct Repair)"]]   <- rcmUtils::ddrGeneSets[["Direct Repair"]]
geneSets[["DDR (G1-S checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G1-S checkpoint"]]
geneSets[["DDR (DNA replication)"]]   <- sort(unique(c(rcmUtils::ddrGeneSets[["DNA replication"]],
maDnaRep)))
geneSets[["DDR (TLS)"]]   <- rcmUtils::ddrGeneSets[["TLS"]]
geneSets[["DDR (G2-M checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G2-M checkpoint"]]
geneSets[["DDR (Chromatin)"]]   <- rcmUtils::ddrGeneSets[["Chromatin remodelling"]]
geneSets[["EMT (Epithelial)"]] <- sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
geneSets[["EMT (Mesenchymal)"]] <- sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
geneSets[["Oncogenes"]] <- rcmUtils::cancerGeneSets[["oncogenes"]]
geneSets[["Protein Kinases"]] <- rcmUtils::cancerGeneSets[["protein_kinases"]]
geneSets[["Solute Carriers"]] <- rcmUtils::cancerGeneSets[["solute_carriers"]]
geneSets[["Transcription Factors"]] <- rcmUtils::cancerGeneSets[["transcription_factors"]]
geneSets[["Tumor Suppressors"]] <- rcmUtils::cancerGeneSets[["tumor_suppressors"]]
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
save(geneSets, file = "data/geneSets.RData")
library(geneSetPathwayAnalysis)
load("~/lmpNci/geneSetPathwayAnalysis/data/geneAnnotTab.RData")
View(geneAnnotTab)
geneAnnot <- geneSetPathwayAnalysis::geneAnnotTab
names(geneSetPathwayAnalysis::geneSets)
geneSets <- geneSetPathwayAnalysis::geneSets
geneSets[["All Gene Sets"]] <- NULL
names(geneSets)
tmp <- names(geneSets)
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets)
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets) <- tmp
names(geneSets)
gene <- "TOP1"
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
tmp
tmp <- tmp[tmp]
tmp
paste0(names(tmp), collapse = ", ")
paste0(names(tmp), collapse = ";")
paste0(names(tmp), collapse = "; ")
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
geneAnnotStr <- paste0(names(tmp), collapse = "; ")
}
}
getDtbAnnot("SLFN11")
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
geneAnnotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
getDtbAnnot("SLFN11")
getDtbAnnot("TOP1")
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
annotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
getDtbAnnot("TOP1")
getDtbAnnot("SLFN11")
View(geneAnnot)
View(geneAnnot)
for (gene in rownames(geneAnnot)){
annotStr <- getDtbAnnot(gene)
if (annotStr != ""){
geneAnnot[gene, "SHORT_ANNOT"] <- annotStr
}
}
View(geneAnnot)
geneAnnotTab <- geneSetPathwayAnalysis::geneAnnotTab
geneSets <- geneSetPathwayAnalysis::geneSets
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets) <- tmp
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
annotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
# If gene is in one or more DTB gene lists, annotate based on these.
# Otherwise retain CellMiner annotation strings.
for (gene in rownames(geneAnnotTab)){
annotStr <- getDtbAnnot(gene)
if (annotStr != ""){
geneAnnotTab[gene, "SHORT_ANNOT"] <- annotStr
}
}
View(geneAnnotTab)
save(geneAnnotTab, file = "data/geneAnnotTab.RData")
library(geneSetPathwayAnalysis)
geneSetPathwayAnalysis::geneAnnotTab["SLFN11", ]
geneSetPathwayAnalysis::geneAnnotTab["TOP1", ]
geneAnnotTab <- geneSetPathwayAnalysis::geneAnnotTab
geneSets <- geneSetPathwayAnalysis::geneSets
dtbGenes <- geneSets[["All Gene Sets"]]
any(duplicated(dtbGenes))
dtbGenesToAdd <- setdiff(dtbGenes, rownames(geneAnnotTab))
dtbGenesToAdd
head(geneAnnotTab)
colnames(geneAnnotTab)
tmp <- data.frame(GENE_NAME = dtbGenesToAdd, ANNOT = NA, SHORT_ANNOT = NA,
stringsAsFactors = FALSE)
stopifnot(identical(colnames(tmp), colnames(geneAnnotTab)))
rownames(tmp) <- tmp$GENE_NAME
geneAnnotTab <- rbind(geneAnnotTab, tmp)
any(duplicated(rownames(geneAnnotTab)))
stopifnot(all(!duplicated(rownames(geneAnnotTab))))
stopfinto(all(dtbGenes %in% rownames(geneAnnotTab)))
stopifnot(all(!duplicated(rownames(geneAnnotTab))))
stopifnot(all(dtbGenes %in% rownames(geneAnnotTab)))
tail(geneAnnotTab)
geneAnnotTab <- geneAnnotTab[order(geneAnnotTab$GENE_NAME), ]
View(geneAnnotTab)
geneAnnotTab["SLFN11", '']
geneAnnotTab["SLFN11", ]
geneAnnotTab <- geneSetPathwayAnalysis::geneAnnotTab
geneSets <- geneSetPathwayAnalysis::geneSets
dtbGenes <- geneSets[["All Gene Sets"]]
dtbGenesToAdd <- setdiff(dtbGenes, rownames(geneAnnotTab))
if (length(dtbGenesToAdd) > 0){
tmp <- data.frame(GENE_NAME = dtbGenesToAdd, ANNOT = NA, SHORT_ANNOT = NA,
stringsAsFactors = FALSE)
rownames(tmp) <- tmp$GENE_NAME
stopifnot(identical(colnames(tmp), colnames(geneAnnotTab)))
geneAnnotTab <- rbind(geneAnnotTab, tmp)
geneAnnotTab <- geneAnnotTab[order(geneAnnotTab$GENE_NAME), ]
stopifnot(all(!duplicated(rownames(geneAnnotTab))))
stopifnot(all(dtbGenes %in% rownames(geneAnnotTab)))
}
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets) <- tmp
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
annotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
# If gene is in one or more DTB gene lists, annotate based on these.
# Otherwise retain CellMiner annotation strings.
for (gene in rownames(geneAnnotTab)){
annotStr <- getDtbAnnot(gene)
if (annotStr != ""){
geneAnnotTab[gene, "SHORT_ANNOT"] <- annotStr
}
}
geneAnnotTab["SLFN11", ]
#--------------------------------------------------------------------------------------------------
# UPDATE GENE (SHORT) ANNOTATIONS TO USE DTB GENE LIST MEMBERSHIP WHERE POSSIBLE
#--------------------------------------------------------------------------------------------------
geneAnnotTab <- geneSetPathwayAnalysis::geneAnnotTab
geneSets <- geneSetPathwayAnalysis::geneSets
dtbGenes <- geneSets[["All Gene Sets"]]
dtbGenesToAdd <- setdiff(dtbGenes, rownames(geneAnnotTab))
if (length(dtbGenesToAdd) > 0){
tmp <- data.frame(GENE_NAME = dtbGenesToAdd, ANNOT = NA, SHORT_ANNOT = NA,
stringsAsFactors = FALSE)
rownames(tmp) <- tmp$GENE_NAME
stopifnot(identical(colnames(tmp), colnames(geneAnnotTab)))
geneAnnotTab <- rbind(geneAnnotTab, tmp)
geneAnnotTab <- geneAnnotTab[order(geneAnnotTab$GENE_NAME), ]
stopifnot(all(!duplicated(rownames(geneAnnotTab))))
stopifnot(all(dtbGenes %in% rownames(geneAnnotTab)))
}
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets) <- tmp
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
annotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
# If gene is in one or more DTB gene lists, annotate based on these.
# Otherwise retain CellMiner annotation strings.
for (gene in rownames(geneAnnotTab)){
annotStr <- getDtbAnnot(gene)
if (annotStr != ""){
geneAnnotTab[gene, "SHORT_ANNOT"] <- annotStr
}
}
save(geneAnnotTab, file = "data/geneAnnotTab.RData")
library(geneSetPathwayAnalysis)
library(geneSetPathwayAnalysis)
library(rcmUtils)
maDnaRep <- sort(unique(read.table(file="inst/extdata/aladjem_dnarep.txt",
header=TRUE, sep="\t", stringsAsFactors=FALSE,
comment.char="", quote="")$GENE_NAME))
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
geneSets[["ABC Transporters"]] <- rcmUtils::cancerGeneSets[["abc_transporters"]]
geneSets[["Apoptosis"]] <- rcmUtils::cancerGeneSets[["apoptosis"]]
geneSets[["Cell Signaling"]] <- rcmUtils::cancerGeneSets[["cell_signaling"]]
geneSets[["DDR"]] <- rcmUtils::cancerGeneSets[["ddr"]]
geneSets[["DDR (BER)"]]   <- rcmUtils::ddrGeneSets[["BER"]]
geneSets[["DDR (NER)"]]   <- rcmUtils::ddrGeneSets[["NER"]]
geneSets[["DDR (MMR)"]]   <- rcmUtils::ddrGeneSets[["MMR"]]
geneSets[["DDR (FA)"]]    <- rcmUtils::ddrGeneSets[["FA (Fanconi anemia pathway)"]]
geneSets[["DDR (HR)"]]    <- rcmUtils::ddrGeneSets[["HR (Homologous Recombination)"]]
geneSets[["DDR (NHEJ)"]]  <- rcmUtils::ddrGeneSets[["NHEJ"]]
geneSets[["DDR (Direct Repair)"]]   <- rcmUtils::ddrGeneSets[["Direct Repair"]]
geneSets[["DDR (G1-S checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G1-S checkpoint"]]
geneSets[["DDR (DNA replication)"]]   <- sort(unique(c(rcmUtils::ddrGeneSets[["DNA replication"]],
maDnaRep)))
geneSets[["DDR (TLS)"]]   <- rcmUtils::ddrGeneSets[["TLS"]]
geneSets[["DDR (G2-M checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G2-M checkpoint"]]
geneSets[["DDR (Chromatin)"]]   <- rcmUtils::ddrGeneSets[["Chromatin remodelling"]]
geneSets[["EMT (Epithelial)"]] <- sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
geneSets[["EMT (Mesenchymal)"]] <- sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
geneSets[["Oncogenes"]] <- rcmUtils::cancerGeneSets[["oncogenes"]]
geneSets[["Protein Kinases"]] <- rcmUtils::cancerGeneSets[["protein_kinases"]]
geneSets[["Solute Carriers"]] <- rcmUtils::cancerGeneSets[["solute_carriers"]]
geneSets[["Transcription Factors"]] <- rcmUtils::cancerGeneSets[["transcription_factors"]]
geneSets[["Tumor Suppressors"]] <- rcmUtils::cancerGeneSets[["tumor_suppressors"]]
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
# For NCI-UMD 2017 Application ------------------------------------------------
geneSets[["NCIUMD2017"]] <- c("ABCB1", "AHR", "ANXA1", "ANXA5", "APP", "AURKB", "BIK", "CCND1",
"DNMT3A", "EGR1", "EHF", "FOXC1", "FOXD1", "GATA3", "GNAQ", "IGF1", "IRF7", "LEF1", "LRP12",
"MAPK10", "MSN", "MST1R", "MYC", "NFKB1", "NR3C1", "PLAGL1", "PPP1R14D", "PPP1R15A", "PTPN6",
"RIPK2", "S100A14", "SERPINB9", "SLC1A6", "SLC38A6", "SLFN11", "TJP3", "TNFAIP8", "YAP1"
)
# -----------------------------------------------------------------------------
any(duplicated(geneSets$NCIUMD2017))
#--------------------------------------------------------------------------------------------------
# PREPARE AND SAVE GENE SETS LIST
#--------------------------------------------------------------------------------------------------
library(rcmUtils)
maDnaRep <- sort(unique(read.table(file="inst/extdata/aladjem_dnarep.txt",
header=TRUE, sep="\t", stringsAsFactors=FALSE,
comment.char="", quote="")$GENE_NAME))
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
geneSets[["ABC Transporters"]] <- rcmUtils::cancerGeneSets[["abc_transporters"]]
geneSets[["Apoptosis"]] <- rcmUtils::cancerGeneSets[["apoptosis"]]
geneSets[["Cell Signaling"]] <- rcmUtils::cancerGeneSets[["cell_signaling"]]
geneSets[["DDR"]] <- rcmUtils::cancerGeneSets[["ddr"]]
geneSets[["DDR (BER)"]]   <- rcmUtils::ddrGeneSets[["BER"]]
geneSets[["DDR (NER)"]]   <- rcmUtils::ddrGeneSets[["NER"]]
geneSets[["DDR (MMR)"]]   <- rcmUtils::ddrGeneSets[["MMR"]]
geneSets[["DDR (FA)"]]    <- rcmUtils::ddrGeneSets[["FA (Fanconi anemia pathway)"]]
geneSets[["DDR (HR)"]]    <- rcmUtils::ddrGeneSets[["HR (Homologous Recombination)"]]
geneSets[["DDR (NHEJ)"]]  <- rcmUtils::ddrGeneSets[["NHEJ"]]
geneSets[["DDR (Direct Repair)"]]   <- rcmUtils::ddrGeneSets[["Direct Repair"]]
geneSets[["DDR (G1-S checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G1-S checkpoint"]]
geneSets[["DDR (DNA replication)"]]   <- sort(unique(c(rcmUtils::ddrGeneSets[["DNA replication"]],
maDnaRep)))
geneSets[["DDR (TLS)"]]   <- rcmUtils::ddrGeneSets[["TLS"]]
geneSets[["DDR (G2-M checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G2-M checkpoint"]]
geneSets[["DDR (Chromatin)"]]   <- rcmUtils::ddrGeneSets[["Chromatin remodelling"]]
geneSets[["EMT (Epithelial)"]] <- sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
geneSets[["EMT (Mesenchymal)"]] <- sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
geneSets[["Oncogenes"]] <- rcmUtils::cancerGeneSets[["oncogenes"]]
geneSets[["Protein Kinases"]] <- rcmUtils::cancerGeneSets[["protein_kinases"]]
geneSets[["Solute Carriers"]] <- rcmUtils::cancerGeneSets[["solute_carriers"]]
geneSets[["Transcription Factors"]] <- rcmUtils::cancerGeneSets[["transcription_factors"]]
geneSets[["Tumor Suppressors"]] <- rcmUtils::cancerGeneSets[["tumor_suppressors"]]
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
# For NCI-UMD 2017 Application ------------------------------------------------
geneSets[["NCIUMD2017"]] <- c("ABCB1", "AHR", "ANXA1", "ANXA5", "APP", "AURKB", "BIK", "CCND1",
"DNMT3A", "EGR1", "EHF", "FOXC1", "FOXD1", "GATA3", "GNAQ", "IGF1", "IRF7", "LEF1", "LRP12",
"MAPK10", "MSN", "MST1R", "MYC", "NFKB1", "NR3C1", "PLAGL1", "PPP1R14D", "PPP1R15A", "PTPN6",
"RIPK2", "S100A14", "SERPINB9", "SLC1A6", "SLC38A6", "SLFN11", "TJP3", "TNFAIP8", "YAP1"
)
# -----------------------------------------------------------------------------
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
save(geneSets, file = "data/geneSets.RData")
library(geneSetPathwayAnalysis)
library(geneSetPathwayAnalysis)
library(geneSetPathwayAnalysis)
emGmt <- readRDS("inst/extdata/enrichmentMap/emGmt.rds")
save(emGmt, "data/emGmt.RData")
save(emGmt, file = "data/emGmt.RData")
library(geneSetPathwayAnalysis)
