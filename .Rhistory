"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
#--------------------------------------------------------------------------------------------------
# PREPARE AND SAVE GENE SETS LIST
#--------------------------------------------------------------------------------------------------
library(rcmUtils)
maDnaRep <- sort(unique(read.table(file="inst/extdata/aladjem_dnarep.txt",
header=TRUE, sep="\t", stringsAsFactors=FALSE,
comment.char="", quote="")$GENE_NAME))
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
geneSets[["ABC Transporters"]] <- rcmUtils::cancerGeneSets[["abc_transporters"]]
geneSets[["Apoptosis"]] <- rcmUtils::cancerGeneSets[["apoptosis"]]
geneSets[["Cell Signaling"]] <- rcmUtils::cancerGeneSets[["cell_signaling"]]
geneSets[["DDR"]] <- rcmUtils::cancerGeneSets[["ddr"]]
geneSets[["DDR (BER)"]]   <- rcmUtils::ddrGeneSets[["BER"]]
geneSets[["DDR (NER)"]]   <- rcmUtils::ddrGeneSets[["NER"]]
geneSets[["DDR (MMR)"]]   <- rcmUtils::ddrGeneSets[["MMR"]]
geneSets[["DDR (FA)"]]    <- rcmUtils::ddrGeneSets[["FA (Fanconi anemia pathway)"]]
geneSets[["DDR (HR)"]]    <- rcmUtils::ddrGeneSets[["HR (Homologous Recombination)"]]
geneSets[["DDR (NHEJ)"]]  <- rcmUtils::ddrGeneSets[["NHEJ"]]
geneSets[["DDR (Direct Repair)"]]   <- rcmUtils::ddrGeneSets[["Direct Repair"]]
geneSets[["DDR (G1-S checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G1-S checkpoint"]]
geneSets[["DDR (DNA replication)"]]   <- sort(unique(c(rcmUtils::ddrGeneSets[["DNA replication"]],
maDnaRep)))
geneSets[["DDR (TLS)"]]   <- rcmUtils::ddrGeneSets[["TLS"]]
geneSets[["DDR (G2-M checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G2-M checkpoint"]]
geneSets[["DDR (Chromatin)"]]   <- rcmUtils::ddrGeneSets[["Chromatin remodelling"]]
geneSets[["EMT (Epithelial)"]] <- sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
geneSets[["EMT (Mesenchymal)"]] <- sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
geneSets[["Oncogenes"]] <- rcmUtils::cancerGeneSets[["oncogenes"]]
geneSets[["Protein Kinases"]] <- rcmUtils::cancerGeneSets[["protein_kinases"]]
geneSets[["Solute Carriers"]] <- rcmUtils::cancerGeneSets[["solute_carriers"]]
geneSets[["Transcription Factors"]] <- rcmUtils::cancerGeneSets[["transcription_factors"]]
geneSets[["Tumor Suppressors"]] <- rcmUtils::cancerGeneSets[["tumor_suppressors"]]
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
#--------------------------------------------------------------------------------------------------
# PREPARE AND SAVE GENE SETS LIST
#--------------------------------------------------------------------------------------------------
library(rcmUtils)
maDnaRep <- sort(unique(read.table(file="inst/extdata/aladjem_dnarep.txt",
header=TRUE, sep="\t", stringsAsFactors=FALSE,
comment.char="", quote="")$GENE_NAME))
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
geneSets[["ABC Transporters"]] <- rcmUtils::cancerGeneSets[["abc_transporters"]]
geneSets[["Apoptosis"]] <- rcmUtils::cancerGeneSets[["apoptosis"]]
geneSets[["Cell Signaling"]] <- rcmUtils::cancerGeneSets[["cell_signaling"]]
geneSets[["DDR"]] <- rcmUtils::cancerGeneSets[["ddr"]]
geneSets[["DDR (BER)"]]   <- rcmUtils::ddrGeneSets[["BER"]]
geneSets[["DDR (NER)"]]   <- rcmUtils::ddrGeneSets[["NER"]]
geneSets[["DDR (MMR)"]]   <- rcmUtils::ddrGeneSets[["MMR"]]
geneSets[["DDR (FA)"]]    <- rcmUtils::ddrGeneSets[["FA (Fanconi anemia pathway)"]]
geneSets[["DDR (HR)"]]    <- rcmUtils::ddrGeneSets[["HR (Homologous Recombination)"]]
geneSets[["DDR (NHEJ)"]]  <- rcmUtils::ddrGeneSets[["NHEJ"]]
geneSets[["DDR (Direct Repair)"]]   <- rcmUtils::ddrGeneSets[["Direct Repair"]]
geneSets[["DDR (G1-S checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G1-S checkpoint"]]
geneSets[["DDR (DNA replication)"]]   <- sort(unique(c(rcmUtils::ddrGeneSets[["DNA replication"]],
maDnaRep)))
geneSets[["DDR (TLS)"]]   <- rcmUtils::ddrGeneSets[["TLS"]]
geneSets[["DDR (G2-M checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G2-M checkpoint"]]
geneSets[["DDR (Chromatin)"]]   <- rcmUtils::ddrGeneSets[["Chromatin remodelling"]]
geneSets[["EMT (Epithelial)"]] <- sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
geneSets[["EMT (Mesenchymal)"]] <- sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
geneSets[["Oncogenes"]] <- rcmUtils::cancerGeneSets[["oncogenes"]]
geneSets[["Protein Kinases"]] <- rcmUtils::cancerGeneSets[["protein_kinases"]]
geneSets[["Solute Carriers"]] <- rcmUtils::cancerGeneSets[["solute_carriers"]]
geneSets[["Transcription Factors"]] <- rcmUtils::cancerGeneSets[["transcription_factors"]]
geneSets[["Tumor Suppressors"]] <- rcmUtils::cancerGeneSets[["tumor_suppressors"]]
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
save(geneSets, file = "data/geneSets.RData")
library(geneSetPathwayAnalysis)
load("~/lmpNci/geneSetPathwayAnalysis/data/geneAnnotTab.RData")
View(geneAnnotTab)
geneAnnot <- geneSetPathwayAnalysis::geneAnnotTab
names(geneSetPathwayAnalysis::geneSets)
geneSets <- geneSetPathwayAnalysis::geneSets
geneSets[["All Gene Sets"]] <- NULL
names(geneSets)
tmp <- names(geneSets)
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets)
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets) <- tmp
names(geneSets)
gene <- "TOP1"
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
tmp
tmp <- tmp[tmp]
tmp
paste0(names(tmp), collapse = ", ")
paste0(names(tmp), collapse = ";")
paste0(names(tmp), collapse = "; ")
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
geneAnnotStr <- paste0(names(tmp), collapse = "; ")
}
}
getDtbAnnot("SLFN11")
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
geneAnnotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
getDtbAnnot("SLFN11")
getDtbAnnot("TOP1")
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
annotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
getDtbAnnot("TOP1")
getDtbAnnot("SLFN11")
View(geneAnnot)
View(geneAnnot)
for (gene in rownames(geneAnnot)){
annotStr <- getDtbAnnot(gene)
if (annotStr != ""){
geneAnnot[gene, "SHORT_ANNOT"] <- annotStr
}
}
View(geneAnnot)
geneAnnotTab <- geneSetPathwayAnalysis::geneAnnotTab
geneSets <- geneSetPathwayAnalysis::geneSets
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets) <- tmp
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
annotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
# If gene is in one or more DTB gene lists, annotate based on these.
# Otherwise retain CellMiner annotation strings.
for (gene in rownames(geneAnnotTab)){
annotStr <- getDtbAnnot(gene)
if (annotStr != ""){
geneAnnotTab[gene, "SHORT_ANNOT"] <- annotStr
}
}
View(geneAnnotTab)
save(geneAnnotTab, file = "data/geneAnnotTab.RData")
library(geneSetPathwayAnalysis)
geneSetPathwayAnalysis::geneAnnotTab["SLFN11", ]
geneSetPathwayAnalysis::geneAnnotTab["TOP1", ]
geneAnnotTab <- geneSetPathwayAnalysis::geneAnnotTab
geneSets <- geneSetPathwayAnalysis::geneSets
dtbGenes <- geneSets[["All Gene Sets"]]
any(duplicated(dtbGenes))
dtbGenesToAdd <- setdiff(dtbGenes, rownames(geneAnnotTab))
dtbGenesToAdd
head(geneAnnotTab)
colnames(geneAnnotTab)
tmp <- data.frame(GENE_NAME = dtbGenesToAdd, ANNOT = NA, SHORT_ANNOT = NA,
stringsAsFactors = FALSE)
stopifnot(identical(colnames(tmp), colnames(geneAnnotTab)))
rownames(tmp) <- tmp$GENE_NAME
geneAnnotTab <- rbind(geneAnnotTab, tmp)
any(duplicated(rownames(geneAnnotTab)))
stopifnot(all(!duplicated(rownames(geneAnnotTab))))
stopfinto(all(dtbGenes %in% rownames(geneAnnotTab)))
stopifnot(all(!duplicated(rownames(geneAnnotTab))))
stopifnot(all(dtbGenes %in% rownames(geneAnnotTab)))
tail(geneAnnotTab)
geneAnnotTab <- geneAnnotTab[order(geneAnnotTab$GENE_NAME), ]
View(geneAnnotTab)
geneAnnotTab["SLFN11", '']
geneAnnotTab["SLFN11", ]
geneAnnotTab <- geneSetPathwayAnalysis::geneAnnotTab
geneSets <- geneSetPathwayAnalysis::geneSets
dtbGenes <- geneSets[["All Gene Sets"]]
dtbGenesToAdd <- setdiff(dtbGenes, rownames(geneAnnotTab))
if (length(dtbGenesToAdd) > 0){
tmp <- data.frame(GENE_NAME = dtbGenesToAdd, ANNOT = NA, SHORT_ANNOT = NA,
stringsAsFactors = FALSE)
rownames(tmp) <- tmp$GENE_NAME
stopifnot(identical(colnames(tmp), colnames(geneAnnotTab)))
geneAnnotTab <- rbind(geneAnnotTab, tmp)
geneAnnotTab <- geneAnnotTab[order(geneAnnotTab$GENE_NAME), ]
stopifnot(all(!duplicated(rownames(geneAnnotTab))))
stopifnot(all(dtbGenes %in% rownames(geneAnnotTab)))
}
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets) <- tmp
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
annotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
# If gene is in one or more DTB gene lists, annotate based on these.
# Otherwise retain CellMiner annotation strings.
for (gene in rownames(geneAnnotTab)){
annotStr <- getDtbAnnot(gene)
if (annotStr != ""){
geneAnnotTab[gene, "SHORT_ANNOT"] <- annotStr
}
}
geneAnnotTab["SLFN11", ]
#--------------------------------------------------------------------------------------------------
# UPDATE GENE (SHORT) ANNOTATIONS TO USE DTB GENE LIST MEMBERSHIP WHERE POSSIBLE
#--------------------------------------------------------------------------------------------------
geneAnnotTab <- geneSetPathwayAnalysis::geneAnnotTab
geneSets <- geneSetPathwayAnalysis::geneSets
dtbGenes <- geneSets[["All Gene Sets"]]
dtbGenesToAdd <- setdiff(dtbGenes, rownames(geneAnnotTab))
if (length(dtbGenesToAdd) > 0){
tmp <- data.frame(GENE_NAME = dtbGenesToAdd, ANNOT = NA, SHORT_ANNOT = NA,
stringsAsFactors = FALSE)
rownames(tmp) <- tmp$GENE_NAME
stopifnot(identical(colnames(tmp), colnames(geneAnnotTab)))
geneAnnotTab <- rbind(geneAnnotTab, tmp)
geneAnnotTab <- geneAnnotTab[order(geneAnnotTab$GENE_NAME), ]
stopifnot(all(!duplicated(rownames(geneAnnotTab))))
stopifnot(all(dtbGenes %in% rownames(geneAnnotTab)))
}
geneSets[["All Gene Sets"]] <- NULL
tmp <- names(geneSets)
tmp[which(tmp == "DDR")] <- "DNA Damage Response (DDR)"
names(geneSets) <- tmp
getDtbAnnot <- function(gene){
annotStr <- ""
tmp <- vapply(geneSets, function(x){ gene %in% x}, logical(1))
if (any(tmp)){
tmp <- tmp[tmp]
annotStr <- paste0(names(tmp), collapse = "; ")
}
return(annotStr)
}
# If gene is in one or more DTB gene lists, annotate based on these.
# Otherwise retain CellMiner annotation strings.
for (gene in rownames(geneAnnotTab)){
annotStr <- getDtbAnnot(gene)
if (annotStr != ""){
geneAnnotTab[gene, "SHORT_ANNOT"] <- annotStr
}
}
save(geneAnnotTab, file = "data/geneAnnotTab.RData")
library(geneSetPathwayAnalysis)
library(geneSetPathwayAnalysis)
library(rcmUtils)
maDnaRep <- sort(unique(read.table(file="inst/extdata/aladjem_dnarep.txt",
header=TRUE, sep="\t", stringsAsFactors=FALSE,
comment.char="", quote="")$GENE_NAME))
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
geneSets[["ABC Transporters"]] <- rcmUtils::cancerGeneSets[["abc_transporters"]]
geneSets[["Apoptosis"]] <- rcmUtils::cancerGeneSets[["apoptosis"]]
geneSets[["Cell Signaling"]] <- rcmUtils::cancerGeneSets[["cell_signaling"]]
geneSets[["DDR"]] <- rcmUtils::cancerGeneSets[["ddr"]]
geneSets[["DDR (BER)"]]   <- rcmUtils::ddrGeneSets[["BER"]]
geneSets[["DDR (NER)"]]   <- rcmUtils::ddrGeneSets[["NER"]]
geneSets[["DDR (MMR)"]]   <- rcmUtils::ddrGeneSets[["MMR"]]
geneSets[["DDR (FA)"]]    <- rcmUtils::ddrGeneSets[["FA (Fanconi anemia pathway)"]]
geneSets[["DDR (HR)"]]    <- rcmUtils::ddrGeneSets[["HR (Homologous Recombination)"]]
geneSets[["DDR (NHEJ)"]]  <- rcmUtils::ddrGeneSets[["NHEJ"]]
geneSets[["DDR (Direct Repair)"]]   <- rcmUtils::ddrGeneSets[["Direct Repair"]]
geneSets[["DDR (G1-S checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G1-S checkpoint"]]
geneSets[["DDR (DNA replication)"]]   <- sort(unique(c(rcmUtils::ddrGeneSets[["DNA replication"]],
maDnaRep)))
geneSets[["DDR (TLS)"]]   <- rcmUtils::ddrGeneSets[["TLS"]]
geneSets[["DDR (G2-M checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G2-M checkpoint"]]
geneSets[["DDR (Chromatin)"]]   <- rcmUtils::ddrGeneSets[["Chromatin remodelling"]]
geneSets[["EMT (Epithelial)"]] <- sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
geneSets[["EMT (Mesenchymal)"]] <- sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
geneSets[["Oncogenes"]] <- rcmUtils::cancerGeneSets[["oncogenes"]]
geneSets[["Protein Kinases"]] <- rcmUtils::cancerGeneSets[["protein_kinases"]]
geneSets[["Solute Carriers"]] <- rcmUtils::cancerGeneSets[["solute_carriers"]]
geneSets[["Transcription Factors"]] <- rcmUtils::cancerGeneSets[["transcription_factors"]]
geneSets[["Tumor Suppressors"]] <- rcmUtils::cancerGeneSets[["tumor_suppressors"]]
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
# For NCI-UMD 2017 Application ------------------------------------------------
geneSets[["NCIUMD2017"]] <- c("ABCB1", "AHR", "ANXA1", "ANXA5", "APP", "AURKB", "BIK", "CCND1",
"DNMT3A", "EGR1", "EHF", "FOXC1", "FOXD1", "GATA3", "GNAQ", "IGF1", "IRF7", "LEF1", "LRP12",
"MAPK10", "MSN", "MST1R", "MYC", "NFKB1", "NR3C1", "PLAGL1", "PPP1R14D", "PPP1R15A", "PTPN6",
"RIPK2", "S100A14", "SERPINB9", "SLC1A6", "SLC38A6", "SLFN11", "TJP3", "TNFAIP8", "YAP1"
)
# -----------------------------------------------------------------------------
any(duplicated(geneSets$NCIUMD2017))
#--------------------------------------------------------------------------------------------------
# PREPARE AND SAVE GENE SETS LIST
#--------------------------------------------------------------------------------------------------
library(rcmUtils)
maDnaRep <- sort(unique(read.table(file="inst/extdata/aladjem_dnarep.txt",
header=TRUE, sep="\t", stringsAsFactors=FALSE,
comment.char="", quote="")$GENE_NAME))
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
geneSets[["ABC Transporters"]] <- rcmUtils::cancerGeneSets[["abc_transporters"]]
geneSets[["Apoptosis"]] <- rcmUtils::cancerGeneSets[["apoptosis"]]
geneSets[["Cell Signaling"]] <- rcmUtils::cancerGeneSets[["cell_signaling"]]
geneSets[["DDR"]] <- rcmUtils::cancerGeneSets[["ddr"]]
geneSets[["DDR (BER)"]]   <- rcmUtils::ddrGeneSets[["BER"]]
geneSets[["DDR (NER)"]]   <- rcmUtils::ddrGeneSets[["NER"]]
geneSets[["DDR (MMR)"]]   <- rcmUtils::ddrGeneSets[["MMR"]]
geneSets[["DDR (FA)"]]    <- rcmUtils::ddrGeneSets[["FA (Fanconi anemia pathway)"]]
geneSets[["DDR (HR)"]]    <- rcmUtils::ddrGeneSets[["HR (Homologous Recombination)"]]
geneSets[["DDR (NHEJ)"]]  <- rcmUtils::ddrGeneSets[["NHEJ"]]
geneSets[["DDR (Direct Repair)"]]   <- rcmUtils::ddrGeneSets[["Direct Repair"]]
geneSets[["DDR (G1-S checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G1-S checkpoint"]]
geneSets[["DDR (DNA replication)"]]   <- sort(unique(c(rcmUtils::ddrGeneSets[["DNA replication"]],
maDnaRep)))
geneSets[["DDR (TLS)"]]   <- rcmUtils::ddrGeneSets[["TLS"]]
geneSets[["DDR (G2-M checkpoint)"]]   <- rcmUtils::ddrGeneSets[["G2-M checkpoint"]]
geneSets[["DDR (Chromatin)"]]   <- rcmUtils::ddrGeneSets[["Chromatin remodelling"]]
geneSets[["EMT (Epithelial)"]] <- sort(unique(c(
"ESRP1", "C1orf172", "RAB25", "C1orf210", "MARVELD3", "CLDN7",
"IRF6", "TMC4", "PRRG2", "PPP1R14D", "GRHL2", "ST14", "TMEM125",
"ATP2C2", "CCDC64B", "S100A14", "CBLC", "SOWAHB", "LOC100288748",
"SPINT1", "MAPK15", "CNKSR1", "CDC42BPG", "ELMO3", "BSPRY", "TJP3",
"ILDR1", "PRSS8", "ESRP2", "EPHA1", "CLDN4")))
geneSets[["EMT (Mesenchymal)"]] <- sort(unique(c(
"LIX1L", "VIM", "CCDC88A", "EMP3", "MSN", "CMTM3", "IKBIP", "QKI", "AP1M1",
"FRMD8P1", "STARD9", "BICD2", "CHST10", "FAM126A", "SYDE1", "GNB4", "LRP12",
"SACS", "DYRK3", "MAP7D1", "RECK", "NR3C1", "ST3GAL3", "SLC35B4", "SOAT1",
"MAP7D3", "SPG20", "ELOVL5", "ETS1")))
geneSets[["Oncogenes"]] <- rcmUtils::cancerGeneSets[["oncogenes"]]
geneSets[["Protein Kinases"]] <- rcmUtils::cancerGeneSets[["protein_kinases"]]
geneSets[["Solute Carriers"]] <- rcmUtils::cancerGeneSets[["solute_carriers"]]
geneSets[["Transcription Factors"]] <- rcmUtils::cancerGeneSets[["transcription_factors"]]
geneSets[["Tumor Suppressors"]] <- rcmUtils::cancerGeneSets[["tumor_suppressors"]]
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
# For NCI-UMD 2017 Application ------------------------------------------------
geneSets[["NCIUMD2017"]] <- c("ABCB1", "AHR", "ANXA1", "ANXA5", "APP", "AURKB", "BIK", "CCND1",
"DNMT3A", "EGR1", "EHF", "FOXC1", "FOXD1", "GATA3", "GNAQ", "IGF1", "IRF7", "LEF1", "LRP12",
"MAPK10", "MSN", "MST1R", "MYC", "NFKB1", "NR3C1", "PLAGL1", "PPP1R14D", "PPP1R15A", "PTPN6",
"RIPK2", "S100A14", "SERPINB9", "SLC1A6", "SLC38A6", "SLFN11", "TJP3", "TNFAIP8", "YAP1"
)
# -----------------------------------------------------------------------------
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
save(geneSets, file = "data/geneSets.RData")
library(geneSetPathwayAnalysis)
library(geneSetPathwayAnalysis)
library(geneSetPathwayAnalysis)
emGmt <- readRDS("inst/extdata/enrichmentMap/emGmt.rds")
save(emGmt, "data/emGmt.RData")
save(emGmt, file = "data/emGmt.RData")
library(geneSetPathwayAnalysis)
library(geneSetPathwayAnalysis)
library(rcmUtils)
gs = geneSetPathwayAnalysis::geneSets
gann = geneSetPathwayAnalysis::geneAnnotTab
em = geneSetPathwayAnalysis::emGmt
View(gann)
View(em)
gs[[1]]
names(gs)
class(gs)
genesets = read.csv("220411.Genelist.csv", row.names = 1, check.names = F)
genesets = read.csv("inst/extdata/220411.Genelist.csv", row.names = 1, check.names = F)
genesets = read.csv("inst/extdata/220411.Genelist.csv", check.names = F, stringsAsFactors = F)
dim(genesets)
View(genesets)
colnames(genesets)[1]
colnames(genesets)[1]= "ZZgene"
oldcol = colnames(genesets)
sort(oldcol)
genesets = read.csv("inst/extdata/220411.Genelist.csv", check.names = F, stringsAsFactors = F)
dim(genesets) #  6839   23
colnames(genesets)[1]= "ZZgene"
oldcol = colnames(genesets)
sort(oldcol)
gsets = read.csv("inst/extdata/220411.Genelist.csv", check.names = F, stringsAsFactors = F)
dim(gsets) #  6839   23
colnames(gsets)[1]= "ZZgene"
oldcol = colnames(gsets)
gsets = gsets[,sort(oldcol)]
View(gsets)
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
for (k in 1:(ncol(gsets)-1)) {
idxk = which(gsets[,k]==1)
geneSets[[colnames(gsets)[k]]] <- gsets$ZZgene[idxk]
}
View(geneSets)
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
View(geneSets)
gsets = read.csv("inst/extdata/220411.Genelist.csv", check.names = F, stringsAsFactors = F)
dim(gsets) #  6839   23
dim(gsets) #  6839   23 >> 6780 -23 ## removed genes without hugo names
gsets = read.csv("inst/extdata/220411.Genelist.csv", check.names = F, stringsAsFactors = F)
dim(gsets) #  6839   23 >> 6780 -23 ## removed genes without hugo names
colnames(gsets)[1]= "ZZgene"
oldcol = colnames(gsets)
gsets = gsets[,sort(oldcol)]
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
for (k in 1:(ncol(gsets)-1)) {
idxk = which(gsets[,k]==1)
geneSets[[colnames(gsets)[k]]] <- gsets$ZZgene[idxk]
}
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
View(gsets)
View(geneSets)
## check
length(gsets$ZZgene)
length(unique(gsets$ZZgene)) # 6780
nbzero = apply(gsets,1,function(x) length(which(is.na(x))))
table(nbzero)
nbzero = apply(gsets,1,function(x) length(which(x==0))
nbzero = apply(gsets,1,function(x) length(which(x==0)))
table(nbzero)
6780-1533
gsets = read.csv("inst/extdata/220411.Genelist.csv", check.names = F, stringsAsFactors = F)
dim(gsets) # 6780 -23 ## removed genes without hugo names
colnames(gsets)[1]= "ZZgene"
oldcol = colnames(gsets)
gsets = gsets[,sort(oldcol)]
View(gsets)
## check
length(gsets$ZZgene) # 6780
length(unique(gsets$ZZgene)) # 6780
nbzero = apply(gsets,1,function(x) length(which(x==0)))
table(nbzero)
nbzero
table(nbzero)
geneSets <- list()
geneSets[["All Gene Sets"]] <- ""
for (k in 1:(ncol(gsets)-1)) {
idxk = which(gsets[,k]==1)
geneSets[[colnames(gsets)[k]]] <- gsets$ZZgene[idxk]
}
geneSets[["All Gene Sets"]] <- setdiff(sort(unique(c(geneSets, recursive = TRUE))), "")
geneSets <- lapply(geneSets, FUN = unique)
stopifnot(all(sort(vapply(geneSets, length, integer(1)))) > 0)
View(geneSets)
save(geneSets, file = "data/geneSets.RData")
library(geneSetPathwayAnalysis)
sessioInfo()
sessionInfo()
library(geneSetPathwayAnalysis)
sessionInfo()
geneSetPathwayAnalysis::geneSets
names(geneSetPathwayAnalysis::geneSets)
gsets = read.csv("inst/extdata/220411.Genelist.csv", check.names = F, stringsAsFactors = F)
dim(gsets) # 6780 -23 ## removed genes without hugo names
View(gsets)
library(rcellminerUtilsCDB)
getGeneSynonyms("C12ORF5")
getGeneSynonyms("C1ORF86")
getGeneSynonyms("C14ORF169")
getGeneSynonyms("C19ORF80")
getGeneSynonyms("MS1")
getGeneSynonyms("pl1")
getGeneSynonyms("PL1")
getGeneSynonyms("whsc1l")
getGeneSynonyms("C11ORF53")
